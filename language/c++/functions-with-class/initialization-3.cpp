#include <iostream>
 
class Fraction
{
private:
    int m_numerator;
    int m_denominator;
 
public:
	// no constructor, so the compiler produces an (implicit) default constructor
    int getNumerator() { return m_numerator; }
    int getDenominator() { return m_denominator; }
    double getValue() { return static_cast<double>(m_numerator) / m_denominator; }
};
 
int main()
{
    Fraction frac; // Since no arguments, calls Fraction() default constructor 调用编译器合成的默认构造函数
    std::cout << frac.getNumerator() << "/" << frac.getDenominator() << '\n';  // 输出随机值 1834356/15068737
 
    return 0;
}

/*
A constructor that takes no parameters (or has parameters that all have default values) is called a default constructor. 
                         +------> Implicitly GENERATED by compiler
                         |
                         |
Default Constructor -----+
                         |
                         |
                         +------> Explicitly provided by programmer
Implicitly defined (by the compiler) default constructor of a class does not initialize members of built-in types.
*/